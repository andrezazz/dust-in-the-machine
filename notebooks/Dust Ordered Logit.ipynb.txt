{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import json\n",
    "import random\n",
    "import math\n",
    "from tqdm import notebook # Library for displaying progress bar\n",
    "np.random.seed(500)\n",
    "\n",
    "# Set the desired bin size\n",
    "bin_size = 15\n",
    "\n",
    "# Sets the output filename\n",
    "filename = 'dust_training_data_ordered_logit_bin_15_drop_1_bin.csv'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we select a pair of snapshots, the lower index is the input and the higher index is the output. Then combined bins together based on the number of desired bins. Ie if the bin size is 15, every 10 bins will be combined into one. Y is randomnly sampled from the bins. \n",
    "\n",
    "Tried the following transformations:\n",
    "- None\n",
    "- Log space\n",
    "- 1 / log space\n",
    "- normalized output\n",
    "- normalized input and output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process_sample(i, snapshot_count, rhod, time, bin_size=15, num_bins=151):\n",
    "    \"\"\" Creates a training sample from two points in time. Selects a random output bin for y, and saves the output bins for comparison\"\"\"\n",
    "    # First sample will always be the first and last element\n",
    "    if i == 0:\n",
    "        idxs = [0, snapshot_count-1]\n",
    "    else:\n",
    "        # Pick two indexes for snapshots (lowest = input, highest = output)\n",
    "        idxs = sorted([random.randint(0,snapshot_count-1) for _ in range(2)])\n",
    "    input_a = rhod[idxs[0]]\n",
    "    output_a = rhod[idxs[1]]\n",
    "\n",
    "    new_input_bins = []\n",
    "    new_output_bins = []\n",
    "    input_bin_sum = np.sum(input_a)\n",
    "    output_bin_sum = np.sum(output_a)\n",
    "    for i in range(bin_size):\n",
    "        # Get the start index of the bin\n",
    "        start = i * math.floor(num_bins/bin_size)\n",
    "        # Get the end index\n",
    "        end = (i+1) * math.floor(num_bins/bin_size)\n",
    "        # Include bin 150 in the last new bin (151 does not divide into 15 evenly for example)\n",
    "        if i == bin_size-1:\n",
    "            end+=num_bins % bin_size\n",
    "            \n",
    "        # Get the old bins and sum them together to create the new one\n",
    "        # Also normalize the input bins\n",
    "        # Could add a statement here to leave out one of the input bins\n",
    "        new_input_bin = np.sum(input_a[start:end]) / input_bin_sum\n",
    "        if new_input_bin < 10^-30:\n",
    "            new_input_bin = 0\n",
    "        # Skip the first bin\n",
    "        if i > 0:\n",
    "            new_input_bins.append(new_input_bin)\n",
    "        \n",
    "        # Normalize the output bin so we can compare the prob distribution to it\n",
    "        new_output_bin = np.sum(output_a[start:end]) / output_bin_sum\n",
    "        if new_output_bin < 10^-30:\n",
    "            new_output_bin = 0\n",
    "        new_output_bins.append(new_output_bin)\n",
    "        \n",
    "    # Select the highest density bin => highest prob\n",
    "    y = np.argmax(new_output_bins)\n",
    "    # Time of the input\n",
    "    t = time[idxs[0]]\n",
    "        \n",
    "    # Difference of time in seconds between two snapshots\n",
    "    delta_t = time[idxs[1]] - t\n",
    "    \n",
    "    row = np.concatenate([input_params,new_input_bins,[t, delta_t, y], new_output_bins])\n",
    "    return row\n",
    "\n",
    "def write_to_file(data, header=True, bin_size=15, batch=False):\n",
    "    \"\"\" Helper method to write training data to a file\"\"\"\n",
    "    columns = ['R', 'Mstar', 'alpha', 'd2g', 'sigma', 'Tgas'] + [f'Input_Bin_{i}' for i in range(bin_size - 1)] + ['t','Delta_t', 'y'] + [f'Output_Bin_{i}' for i in range(bin_size)]\n",
    "    df = pd.DataFrame(res, columns=columns)\n",
    "\n",
    "    # If writing in batch set the file mode to append\n",
    "    mode = 'a' if batch else 'w'\n",
    "    df.to_csv(filename, chunksize=100000, mode=mode, header=header, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ae95dc99c23c43609aa5d5d1020991cb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=10000.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "root_data_path = \"/project/SDS-capstones-kropko21/uva-astronomy/data/dust_coag_data_v1\"\n",
    "data_group = \"combined_v1\"\n",
    "\n",
    "# Store formatted data for training\n",
    "res = []\n",
    "\n",
    "chunk_size = 1000\n",
    "# Set this to a smaller number to get a smaller training set\n",
    "model_count = 10000\n",
    "writes = 0\n",
    "for d in notebook.tqdm(range(model_count)):\n",
    "    data_set = data_set = str(d).zfill(5)\n",
    "\n",
    "    data_dir = f\"{root_data_path}/{data_group}/data_{data_set}\"\n",
    "\n",
    "    input_params = None\n",
    "    # Open and extract the input parameters\n",
    "    with open(os.path.join(root_data_path, \"model_dict_v1.json\")) as f:\n",
    "        model_dict = json.load(f)\n",
    "        input_dict = model_dict[data_set]\n",
    "        input_params = [input_dict['R'], input_dict['Mstar'], input_dict['alpha'],input_dict['d2g'], input_dict['sigma'], input_dict['Tgas']]\n",
    "\n",
    "    try:\n",
    "        # `rho_dat`: The dust mass density (in g/cm^3) in each particle size/bin at a given snapshot in time. This is the main \"output\", i.e., the primary result, of any given model.\n",
    "        rhod = np.loadtxt(os.path.join(data_dir,\"rho_d.dat\"))\n",
    "        # Replace NaNs with 0s\n",
    "        rhod = np.nan_to_num(rhod)\n",
    "        # Replace negative values with 0s\n",
    "        rhod = np.where(rhod<0, 0, rhod) \n",
    "        \n",
    "        # `a_grid.dat`: The dust particle size in each \"bin\" in centimeters.\n",
    "        a_grid = np.loadtxt(os.path.join(data_dir, 'a_grid.dat'))\n",
    "\n",
    "        # `time.dat`: The time of each snapshot (in seconds).\n",
    "        time = np.loadtxt(os.path.join(data_dir, \"time.dat\"))\n",
    "    except Exception as e:\n",
    "        print(f'model {d} skipped')\n",
    "        import traceback\n",
    "        print(traceback.print_exc())\n",
    "        continue\n",
    "\n",
    "    snapshot_count = len(rhod)\n",
    "\n",
    "    # Set the number of samples\n",
    "    if snapshot_count > 15:\n",
    "        # Set the max to 100 for time as 15 cHr 2 is about 100\n",
    "        samples = 100\n",
    "    else:\n",
    "        # The number of pairs\n",
    "        samples = int(math.factorial(snapshot_count) / math.factorial(2) / math.factorial(snapshot_count-2))\n",
    "    \n",
    "    samples += 1\n",
    "    for i in range(samples):\n",
    "        row = process_sample(i, snapshot_count, rhod, time, bin_size=bin_size)\n",
    "        res.append(row)\n",
    "        \n",
    "    # Write to csv every x models to avoid oom\n",
    "    if d != 0 and d % chunk_size == (model_count - 1) % chunk_size:\n",
    "        writes += 1\n",
    "        # Only write the header on first chunk\n",
    "        header = writes == 1\n",
    "        write_to_file(res, header, bin_size=bin_size, batch=True)\n",
    "        res = []\n",
    "    \n",
    "# Write out the entire file at the end\n",
    "#write_to_file(res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.0    210912\n",
       "5.0     145724\n",
       "6.0      82791\n",
       "7.0      56221\n",
       "8.0      44341\n",
       "9.0      38729\n",
       "10.0     36739\n",
       "11.0     33821\n",
       "4.0      32690\n",
       "12.0     32674\n",
       "13.0     27738\n",
       "2.0      22063\n",
       "3.0      21256\n",
       "1.0       8095\n",
       "0.0       6544\n",
       "Name: y, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "read_df = pd.read_csv(filename)\n",
    "read_df['y'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we split the data into train and test and use the mord package for ordered logistic regression. We extracted the probabilities and scored the model fit with negagative mean absolute error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#%pip install mord\n",
    "import mord\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "def create_test_train(data_set_path, test_size=0.10):\n",
    "    \"\"\" Splits a given csv file into testing and training. Target column must be y \"\"\"\n",
    "    # Make sure the columns are set\n",
    "    data_set = pd.read_csv(data_set_path)\n",
    "\n",
    "    # Shuffle the data\n",
    "    data_set = data_set.sample(frac=1, random_state=0)\n",
    " \n",
    "    # Select all except y column and the output bins for the predictors\n",
    "    data_set_X = data_set.drop(['y'] + [f'Output_Bin_{i}' for i in range(bin_size)], axis=1)\n",
    "    \n",
    "    # Select just y column and output bins\n",
    "    data_set_Y = data_set[['y'] + [f'Output_Bin_{i}' for i in range(bin_size)]]\n",
    "\n",
    "    #Split into training and test data\n",
    "    return train_test_split(data_set_X,\n",
    "                            data_set_Y,\n",
    "                            test_size=test_size, \n",
    "                            random_state=300)\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = create_test_train(\"dust_training_data_ordered_logit_bin_15_drop_small.csv\")\n",
    "y_train = y_train.astype(int)\n",
    "\n",
    "logistic_model = mord.LogisticIT()\n",
    "#logistic_model = LogisticRegression(penalty=\"elasticnet\", solver='saga', multi_class='multinomial', l1_ratio=0.5)\n",
    "# Fit only on the y column\n",
    "logistic_model.fit(X_train, y_train['y'])\n",
    "\n",
    "# Obtain the probability distribution of the class\n",
    "probs = logistic_model.predict_proba(X_test)\n",
    "\n",
    "# Obtain the negative mean absolute error\n",
    "score = logistic_model.score(X_test, y_test['y'])\n",
    "print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.0    211155\n",
       "5.0     145464\n",
       "6.0      83189\n",
       "7.0      56260\n",
       "8.0      44278\n",
       "9.0      38514\n",
       "10.0     36641\n",
       "11.0     33810\n",
       "4.0      32672\n",
       "12.0     32648\n",
       "13.0     27744\n",
       "2.0      22071\n",
       "3.0      21279\n",
       "1.0       8049\n",
       "0.0       6564\n",
       "Name: y, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Output the counts of our labels\n",
    "#pd.read_csv(\"dust_training_data_ordered_logit_bin_15_3.csv\")['y'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We made a plot of an observation and the predicted probability distribution. We also calculated the entropy for each test observation and the predicted observation which is the Kullback-Leibler divergence.\n",
    "\n",
    "On the full models with a bin size of 15, entropy averaged around 2.4 which is not good."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy\n",
    "from scipy.stats import entropy, kstest\n",
    "\n",
    "# Select a test observation to graph\n",
    "test_obs = probs[5]\n",
    "cols = [f'Output_Bin_{i}' for i in range(bin_size)]\n",
    "\n",
    "# Get the true distribution\n",
    "y_obs = y_test.iloc[5][cols]\n",
    "\n",
    "# Plot the two together\n",
    "from matplotlib import pyplot as plt\n",
    "plt.plot(test_obs)\n",
    "plt.plot(y_obs)\n",
    "plt.show()\n",
    "\n",
    "#Uniform distribution\n",
    "uniform_probs = np.full(\n",
    "    shape=bin_size,\n",
    "    fill_value=1/bin_size,\n",
    "   dtype=np.float)\n",
    "\n",
    "uniform_probs = np.repeat([uniform_probs], len(y_test),0)\n",
    "\n",
    "def get_entropy_from_predictions(y_test, preds):\n",
    "    # Get entropy for all\n",
    "    entropys = []\n",
    "    for idx, prob in enumerate(preds):\n",
    "        output = y_test.iloc[idx][[f'Output_Bin_{i}' for i in range(bin_size)]]\n",
    "        # To compute the entropies, the length of the probability list and the bin list must be equal\n",
    "        # If your training data does not include all bins, you'll need to fill in 0s for the probability matrix\n",
    "        p = prob\n",
    "    \n",
    "        # Reshape the probabilities for missing ones\n",
    "        if prob.shape[0] !=output.shape[0]:\n",
    "            new_prob = np.zeros(bin_size)\n",
    "            for y in np.unique(y_test):\n",
    "                new_prob[y] = output[y]\n",
    "            p = new_prob\n",
    "        \n",
    "        ent = entropy(p, output.values)\n",
    "        entropys.append(ent)\n",
    "    return entropys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The weights for ordered logistic regression are [-3.62851363e-23  6.01253750e-24  5.99645927e-26  1.81367751e-24\n",
    "  7.60720374e-21  4.02295591e-22  1.20522032e-26  5.83738829e-26\n",
    "  1.06397716e-25  1.91096479e-25  2.70059363e-25  4.59112014e-25\n",
    "  6.51787801e-25  4.56346698e-25  3.46132030e-25  2.89165514e-25\n",
    "  2.58570675e-25  2.38370174e-25  2.06436920e-25  1.57797803e-25\n",
    "  2.31083822e-24  6.22381710e-13  2.56913296e-12]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_drop1, X_test_drop1, y_train_drop1, y_test_drop1 = create_test_train(\"dust_training_data_ordered_logit_bin_15_drop_1_bin.csv\")\n",
    "y_train_drop1 = y_train_drop1.astype(int)\n",
    "\n",
    "logistic_model_drop1 = mord.LogisticIT()\n",
    "# Fit only on the y column\n",
    "logistic_model_drop1.fit(X_train_drop1, y_train_drop1['y'])\n",
    "\n",
    "# Obtain the probability distribution of the class\n",
    "probs_drop1 = logistic_model_drop1.predict_proba(X_test_drop1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Displays the entropy for the uniform distribution, logistic regression with 15 bins, and logistic regression with 14 input bins (drops the first bin). The entropy does not change much between dropping a bin or not. They are better than just a uniform distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entropy for logistic regression:                   0\n",
      "count  80034.000000\n",
      "mean      76.734436\n",
      "std      164.832547\n",
      "min        0.029114\n",
      "25%        1.782056\n",
      "50%        4.463710\n",
      "75%       75.808856\n",
      "max     1000.000000\n",
      "Entropy for logistic regression dropping first bin:                   0\n",
      "count  80034.000000\n",
      "mean      76.800328\n",
      "std      165.050971\n",
      "min        0.063576\n",
      "25%        1.773307\n",
      "50%        4.453947\n",
      "75%       74.706034\n",
      "max     1000.000000\n",
      "Entropy for uniform:                   0\n",
      "count  80034.000000\n",
      "mean     100.335601\n",
      "std      145.600085\n",
      "min        0.804889\n",
      "25%       43.827432\n",
      "50%       75.423806\n",
      "75%      119.465119\n",
      "max     1000.000000\n"
     ]
    }
   ],
   "source": [
    "df_entropy = pd.DataFrame(get_entropy_from_predictions(y_test, probs))\n",
    "\n",
    "df_entropy_uniform = pd.DataFrame(get_entropy_from_predictions(y_test,uniform_probs))\n",
    "\n",
    "df_entropy_drop1 = pd.DataFrame(get_entropy_from_predictions(y_test_drop1,probs_drop1))\n",
    "\n",
    "#Replace inf with large numbers\n",
    "df_entropy.replace(np.inf, 1000, inplace=True)\n",
    "df_entropy_uniform.replace(np.inf, 1000, inplace=True)\n",
    "df_entropy_drop1.replace(np.inf, 1000, inplace=True)\n",
    "\n",
    "print(f\"Entropy for logistic regression: {df_entropy.describe()}\")\n",
    "print(f\"Entropy for logistic regression dropping first bin: {df_entropy_drop1.describe()}\")\n",
    "\n",
    "#df_entropy_uniform = pd.DataFrame(entropys_uniform)\n",
    "print(f\"Entropy for uniform: {df_entropy_uniform.describe()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Display our logistic model coefficents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic: [-3.62851363e-23  6.01253750e-24  5.99645927e-26  1.81367751e-24\n",
      "  7.60720374e-21  4.02295591e-22  1.20522032e-26  5.83738829e-26\n",
      "  1.06397716e-25  1.91096479e-25  2.70059363e-25  4.59112014e-25\n",
      "  6.51787801e-25  4.56346698e-25  3.46132030e-25  2.89165514e-25\n",
      "  2.58570675e-25  2.38370174e-25  2.06436920e-25  1.57797803e-25\n",
      "  2.31083822e-24  6.22381710e-13  2.56913296e-12]\n",
      "Logistic drop one bin: [-3.78959554e-23  5.94791322e-24  5.92617749e-26  1.79905699e-24\n",
      "  7.54390379e-21  3.98738836e-22  5.68177097e-26  1.03798282e-25\n",
      "  1.86072622e-25  2.62882045e-25  4.48680932e-25  6.47022621e-25\n",
      "  4.52827258e-25  3.43455297e-25  2.86832387e-25  2.57329069e-25\n",
      "  2.36530105e-25  2.03673983e-25  1.54993306e-25  2.29583684e-24\n",
      "  6.19530848e-13  2.59593687e-12]\n"
     ]
    }
   ],
   "source": [
    "print(f\"Logistic: {logistic_model.coef_}\")\n",
    "print(f\"Logistic drop one bin: {logistic_model_drop1.coef_}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try a Softmax(multinomial) regression with the normalized data using Gradient Descent. Got an entropy of about 30."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/keh4nb/.local/lib/python3.7/site-packages/mlxtend/classifier/softmax_regression.py:99: RuntimeWarning: divide by zero encountered in log\n",
      "  return - np.sum(np.log(output) * (y_target), axis=1)\n",
      "/home/keh4nb/.local/lib/python3.7/site-packages/mlxtend/classifier/softmax_regression.py:99: RuntimeWarning: invalid value encountered in multiply\n",
      "  return - np.sum(np.log(output) * (y_target), axis=1)\n",
      "Iteration: 100/100 | Cost nan | Elapsed: 0:03:32 | ETA: 0:00:00"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<mlxtend.classifier.softmax_regression.SoftmaxRegression at 0x7fb03de440d0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#%pip install mlxtend \n",
    "from mlxtend.classifier import SoftmaxRegression\n",
    "\n",
    "lr = SoftmaxRegression(eta=0.01, \n",
    "                       epochs=100, # Passes over the training sets\n",
    "                       minibatches=1, # Gradient descent learning\n",
    "                       l2=0.5, # L2 regularization\n",
    "                       random_seed=1,\n",
    "                       print_progress=3)\n",
    "lr.fit(X_train_drop1.to_numpy(), y_train_drop1['y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  0\n",
      "count  80034.000000\n",
      "mean      30.790867\n",
      "std       70.000785\n",
      "min        0.656108\n",
      "25%        2.192372\n",
      "50%        3.386435\n",
      "75%       17.665226\n",
      "max     1000.000000\n"
     ]
    }
   ],
   "source": [
    "# Extract probabilities and show entropy\n",
    "probs_softmax = lr.predict_proba(X_test_drop1.to_numpy())\n",
    "df_softmax_entropy = pd.DataFrame(get_entropy_from_predictions(y_test_drop1, probs_softmax))\n",
    "df_softmax_entropy.replace(np.inf, 1000, inplace=True)\n",
    "\n",
    "# Select a test observation to graph\n",
    "test_obs = probs_softmax[5]\n",
    "cols = [f'Output_Bin_{i}' for i in range(bin_size)]\n",
    "\n",
    "# Get the true distribution\n",
    "y_obs = y_test_drop1.iloc[5][cols]\n",
    "\n",
    "# Plot the two together\n",
    "from matplotlib import pyplot as plt\n",
    "plt.plot(test_obs, color='blue')\n",
    "plt.plot(y_obs, color='orange')\n",
    "plt.show()\n",
    "\n",
    "print(df_softmax_entropy.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 9.60483087e+05  1.75962898e+06  2.11386539e+06  3.33026895e+05\n",
      "   3.10449298e+06  1.47032735e+06  1.00298730e+06  7.97372403e+05\n",
      "   1.43149018e+05  1.84633574e+05  1.49006079e+05 -5.21337993e+05\n",
      "  -5.15819052e+05 -7.14679139e+05 -1.02671369e+07]\n",
      " [-5.62285066e+03 -2.23101522e+02  1.22366930e+03  2.56028038e+03\n",
      "  -3.28867310e+03 -4.01205023e+04  3.96008004e+03  6.98230248e+03\n",
      "   1.07136132e+04  7.97126295e+03  9.62752895e+03  5.23261581e+03\n",
      "   8.63138670e+03  5.13691524e+03 -1.27845314e+04]\n",
      " [ 2.75749234e+02  4.59826138e+02  1.29903592e+03  1.27285715e+03\n",
      "   6.23996664e+02 -1.14635817e+03  2.64040531e+01  2.11411168e+02\n",
      "   2.11725832e+02 -2.35498812e+01 -1.29975370e+02 -2.12462673e+02\n",
      "  -1.72201329e+02 -2.23915277e+02 -2.47255479e+03]\n",
      " [-1.46527404e+03  7.21645118e+02  8.75663690e+02 -1.21635232e+03\n",
      "  -1.29122284e+03 -2.02717878e+04 -3.01800485e+03 -4.87474856e+02\n",
      "   6.45625889e+02  2.03079726e+03  3.67809327e+03  1.82479278e+03\n",
      "   1.84618484e+03  1.64625876e+03  1.44810803e+04]\n",
      " [-7.07211279e+06 -4.03744438e+06 -9.98635564e+06 -8.54346691e+06\n",
      "  -1.79027271e+07 -9.64996073e+07 -3.43641214e+07 -1.67212061e+07\n",
      "  -6.33194889e+06 -3.99149268e+06 -2.38236270e+06 -2.19235809e+06\n",
      "   1.49888625e+07 -3.25913758e+05  1.95362255e+08]\n",
      " [-4.02057440e+05 -2.16076881e+05 -4.85956684e+05 -3.43492763e+05\n",
      "  -8.57971767e+05 -4.41435224e+06 -9.86721585e+05 -2.76700776e+05\n",
      "   1.71659635e+05  1.45207788e+05  2.66536079e+05  2.59617511e+05\n",
      "   6.76711261e+05  3.57663126e+05  6.10593474e+06]\n",
      " [ 5.03361062e+02  1.69566298e+03  3.18770013e+03  1.78785179e+03\n",
      "   1.76463285e+03 -3.87882493e+02  2.01431637e+02  3.03833611e+02\n",
      "   2.62596662e+02 -1.00762265e+02 -1.99034687e+02 -5.04391259e+02\n",
      "  -4.49131171e+02 -5.87189487e+02 -7.47867131e+03]\n",
      " [ 9.56728246e+01  9.68333548e+02  3.88951393e+03  2.55669529e+03\n",
      "   2.09999645e+03  1.03370139e+03  4.13926638e+02  2.48491559e+02\n",
      "   3.54595211e+02  2.61153265e+01 -1.18659088e+01 -4.02538988e+02\n",
      "  -3.76474704e+02 -6.47682800e+02 -1.02484945e+04]\n",
      " [-4.01855434e+02 -3.82312231e+02  8.48332112e+02  3.56916195e+03\n",
      "   2.48046553e+03  4.80402672e+03  1.89618698e+03  6.39200434e+02\n",
      "   4.34492633e+02 -3.95294017e+00 -4.31608357e+01 -4.02898176e+02\n",
      "  -2.46286580e+02 -5.72970615e+02 -1.26184127e+04]\n",
      " [-5.54189945e+02 -4.81401101e+02 -1.14359540e+03  6.21952159e+02\n",
      "   3.60540418e+03  8.76650396e+03  4.46426050e+03  1.61501935e+03\n",
      "   9.67571777e+02  2.05390170e+02 -1.37796158e+01 -5.99955313e+02\n",
      "  -3.38994403e+02 -6.84688845e+02 -1.64294780e+04]\n",
      " [-8.34459084e+02 -6.72810408e+02 -1.60896154e+03 -1.39368377e+03\n",
      "  -1.78220119e+03  1.50587936e+04  8.50298115e+03  3.19552437e+03\n",
      "   2.24860878e+03  1.06350351e+03  5.38795324e+02 -4.97164815e+02\n",
      "  -2.07850189e+02 -7.63487088e+02 -2.28475984e+04]\n",
      " [-9.11421717e+02 -5.30098736e+02 -1.25199997e+03 -1.10114114e+03\n",
      "  -2.25692038e+03 -8.78847349e+03  9.38693363e+03  5.24114454e+03\n",
      "   3.24000250e+03  2.39264608e+03  1.94299803e+03  9.98782884e+02\n",
      "   9.17661497e+02  2.78305104e+02 -9.55838807e+03]\n",
      " [-5.28084773e+02 -3.07009989e+02 -7.42631073e+02 -6.50000146e+02\n",
      "  -1.36079565e+03 -7.26466642e+03 -1.18769859e+03  6.56471052e+03\n",
      "   3.19095875e+03  1.78794917e+03  1.59720507e+03  1.15348845e+03\n",
      "   1.10530874e+03  5.88783042e+02 -3.94747880e+03]\n",
      " [-3.78486469e+02 -2.23570135e+02 -5.35625027e+02 -4.71416572e+02\n",
      "  -9.76268455e+02 -5.15644918e+03 -1.90551004e+03 -7.83472607e+01\n",
      "   5.61919472e+03  2.51690556e+03  1.46152303e+03  9.49176085e+02\n",
      "   1.00381940e+03  6.56155746e+02 -2.48111189e+03]\n",
      " [-3.10335048e+02 -1.86591288e+02 -4.39907571e+02 -3.90849076e+02\n",
      "  -7.97953235e+02 -4.17254579e+03 -1.54540540e+03 -9.20659279e+02\n",
      "   3.77983488e+02  5.08985461e+03  2.60884130e+03  1.23340838e+03\n",
      "   9.02129643e+02  5.20819348e+02 -1.96877317e+03]\n",
      " [-2.76514511e+02 -1.68876009e+02 -3.89431984e+02 -3.49568042e+02\n",
      "  -7.10695999e+02 -3.69506429e+03 -1.35678509e+03 -8.19158411e+02\n",
      "  -4.82479765e+02  4.34912371e+02  5.20795297e+03  2.46238213e+03\n",
      "   1.40545251e+03  6.34675106e+02 -1.89680313e+03]\n",
      " [-2.49107982e+02 -1.54239814e+02 -3.48257211e+02 -3.16415118e+02\n",
      "  -6.41292067e+02 -3.32846034e+03 -1.21511871e+03 -7.34608679e+02\n",
      "  -4.34096067e+02 -4.08570071e+02  6.86094449e+02  4.94115570e+03\n",
      "   2.57827729e+03  1.28417441e+03 -1.65955263e+03]\n",
      " [-2.14032216e+02 -1.33335738e+02 -2.99327215e+02 -2.72197184e+02\n",
      "  -5.48709287e+02 -2.84794694e+03 -1.03824950e+03 -6.26803727e+02\n",
      "  -3.69643803e+02 -3.48880904e+02 -2.81023402e+02  6.13418338e+02\n",
      "   5.02704476e+03  2.35521491e+03 -1.01551693e+03]\n",
      " [-1.59037930e+02 -9.83684147e+01 -2.19975910e+02 -1.99480877e+02\n",
      "  -4.09794608e+02 -2.14181441e+03 -7.87537779e+02 -4.76419855e+02\n",
      "  -2.81842604e+02 -2.67336437e+02 -2.16737156e+02 -2.50260208e+02\n",
      "   7.25515382e+02  4.61713880e+03  1.65970628e+02]\n",
      " [-2.18123614e+03 -1.32678788e+03 -2.95284313e+03 -2.65148812e+03\n",
      "  -5.68995145e+03 -3.06093514e+04 -1.15931548e+04 -7.00693100e+03\n",
      "  -4.25628929e+03 -4.06869575e+03 -3.29701812e+03 -3.96040619e+03\n",
      "  -3.00957823e+03 -2.06553276e+03  8.46692605e+04]\n",
      " [-9.78374226e+14 -1.54821711e+15  1.86100559e+14 -1.49505056e+15\n",
      "   8.35869179e+15 -2.51471443e+15  6.15282769e+15  1.01276230e+15\n",
      "   4.04499110e+15 -7.36505705e+15  1.45686980e+15 -6.96482534e+15\n",
      "  -3.49707694e+15  1.67486514e+15  1.47620728e+15]\n",
      " [-3.12144138e+15 -9.59852773e+14  8.33360665e+15  3.09087877e+15\n",
      "   3.13625733e+15  5.18378562e+15  2.07509332e+15  2.97231435e+15\n",
      "  -4.08452349e+15 -1.21717821e+16  7.11214521e+15 -2.54464498e+16\n",
      "   1.53855382e+15  6.56486780e+15  5.77654661e+15]]\n"
     ]
    }
   ],
   "source": [
    "print(lr.w_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try softmax regression on the dataset that doesnt drop the first input bin. Average entropy was higher than the uniform so not good."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/keh4nb/.local/lib/python3.7/site-packages/mlxtend/classifier/softmax_regression.py:99: RuntimeWarning: divide by zero encountered in log\n",
      "  return - np.sum(np.log(output) * (y_target), axis=1)\n",
      "/home/keh4nb/.local/lib/python3.7/site-packages/mlxtend/classifier/softmax_regression.py:99: RuntimeWarning: invalid value encountered in multiply\n",
      "  return - np.sum(np.log(output) * (y_target), axis=1)\n",
      "Iteration: 100/100 | Cost nan | Elapsed: 0:03:33 | ETA: 0:00:00"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  0\n",
      "count  80034.000000\n",
      "mean     146.456402\n",
      "std      107.506086\n",
      "min        0.000000\n",
      "25%        1.368835\n",
      "50%      227.225369\n",
      "75%      227.225369\n",
      "max     1000.000000\n"
     ]
    }
   ],
   "source": [
    "#%pip install mlxtend \n",
    "from mlxtend.classifier import SoftmaxRegression\n",
    "\n",
    "lr = SoftmaxRegression(eta=0.01, \n",
    "                       epochs=100, # Passes over the training sets\n",
    "                       minibatches=1, # Gradient descent learning\n",
    "                       l2=0.5, # L2 regularization\n",
    "                       random_seed=1,\n",
    "                       print_progress=3)\n",
    "lr.fit(X_train.to_numpy(), y_train['y'])\n",
    "\n",
    "# Extract probabilities and show entropy\n",
    "probs_softmax = lr.predict_proba(X_test.to_numpy())\n",
    "df_softmax_entropy = pd.DataFrame(get_entropy_from_predictions(y_test, probs_softmax))\n",
    "df_softmax_entropy.replace(np.inf, 1000, inplace=True)\n",
    "\n",
    "# Select a test observation to graph\n",
    "test_obs = probs_softmax[5]\n",
    "cols = [f'Output_Bin_{i}' for i in range(bin_size)]\n",
    "\n",
    "# Get the true distribution\n",
    "y_obs = y_test.iloc[5][cols]\n",
    "\n",
    "# Plot the two together\n",
    "from matplotlib import pyplot as plt\n",
    "plt.plot(test_obs, color='blue')\n",
    "plt.plot(y_obs, color='orange')\n",
    "plt.show()\n",
    "\n",
    "print(df_softmax_entropy.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
